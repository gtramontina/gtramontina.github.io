<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>gtramontina</title>
		<link>https://gtramontina.com/</link>
		<description>Recent content on gtramontina</description>
		<language>en-us</language>
		
		
		
		<lastBuildDate>Wed, 28 Jul 2021 07:30:00 +0000</lastBuildDate>
		
		<atom:link href="https://gtramontina.com/index.xml" rel="self" type="application/rss+xml" />
		
		
		<item>
			<title>Lessons (re)learned: 4. Inject Dependencies</title>
			<link>https://gtramontina.com/posts/lessons-re-learned-4-inject-dependencies.html</link>
			<pubDate>Wed, 28 Jul 2021 07:30:00 +0000</pubDate>
			
			<guid>https://gtramontina.com/posts/lessons-re-learned-4-inject-dependencies.html</guid>
			<description>Inject Dependencies Note: This post is part of the series Lessons (re)learned.
When writing software following the object-oriented paradigm, dependency injection remains one useful technique, regardless of language.
As mentioned in the post titled Reduced Integration Surface, managing dependencies is key to sustainable software development. One practice that helps up better do that is to separate construction logic from business logic. Usually, construction takes place in the software entry point, where we declare and wire up the entire dependency graph.</description>
		</item>
		
		<item>
			<title>Lessons (re)learned: 3. Reduced Integration Surface</title>
			<link>https://gtramontina.com/posts/lessons-re-learned-3-reduced-integration-surface.html</link>
			<pubDate>Thu, 18 Mar 2021 03:00:00 +0000</pubDate>
			
			<guid>https://gtramontina.com/posts/lessons-re-learned-3-reduced-integration-surface.html</guid>
			<description>Reduced Integration Surface Note: This post is part of the series Lessons (re)learned.
Integrations with third-party systems are also sources of nondeterminism. We should always strive to keep our dependencies at a minimum. The essence of sustainable software development is dependency management. Internal and external.
We must approach integrations from our needs&#39; perspective. With that in mind, we can design interfaces – upon which our system depend on – that satisfy those needs.</description>
		</item>
		
		<item>
			<title>Lessons (re)learned: 2. Isolate Nondeterminism</title>
			<link>https://gtramontina.com/posts/lessons-re-learned-2-isolate-nondeterminism.html</link>
			<pubDate>Thu, 18 Mar 2021 02:00:00 +0000</pubDate>
			
			<guid>https://gtramontina.com/posts/lessons-re-learned-2-isolate-nondeterminism.html</guid>
			<description>Isolate Nondeterminism Note: This post is part of the series Lessons (re)learned.
Every system has sources of nondeterminism. We need to identify them and push them off to the boundaries, leveraging dependency injection in order to make use of them. Not controlling these sources of nondeterminism usually leads to test flakiness. Time and random are two very common sources of nondeterminism. In fact, any language-provided static functions are likely to be nondeterministic.</description>
		</item>
		
		<item>
			<title>Lessons (re)learned: 1. No Primitives</title>
			<link>https://gtramontina.com/posts/lessons-re-learned-1-no-primitives.html</link>
			<pubDate>Thu, 18 Mar 2021 01:00:00 +0000</pubDate>
			
			<guid>https://gtramontina.com/posts/lessons-re-learned-1-no-primitives.html</guid>
			<description>No Primitives Note: This post is part of the series Lessons (re)learned.
Here&amp;rsquo;s a relatively well known code smell: Primitive Obsession. It is always very tempting — and some claim &amp;ldquo;quicker&amp;rdquo; — to use primitives instead of creating new types. When we do this, we&amp;rsquo;re probably missing an opportunity to model a concept of the domain we&amp;rsquo;re working with — or, at least, to raise the abstraction level a little bit.</description>
		</item>
		
		<item>
			<title>Lessons (re)learned</title>
			<link>https://gtramontina.com/posts/lessons-re-learned-0.html</link>
			<pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
			
			<guid>https://gtramontina.com/posts/lessons-re-learned-0.html</guid>
			<description>Lessons (re)learned Every now and again I am reminded of certain software development lessons I&amp;rsquo;ve already learned and, for reasons I&amp;rsquo;m yet to document, I keep re-learning. Groundhog Day feelings.
Writing these lessons down is my attempt at retaining this knowledge long(er) term; to reduce the time spent going in circles only to learn the same lesson again. When the code is giving us the same ol&#39; hints, we, most certainly, can apply the same ol&#39; techniques.</description>
		</item>
		
		<item>
			<title>Do Repeat Yourself</title>
			<link>https://gtramontina.com/posts/do-repeat-yourself.html</link>
			<pubDate>Sun, 23 Feb 2020 10:27:57 +0000</pubDate>
			
			<guid>https://gtramontina.com/posts/do-repeat-yourself.html</guid>
			<description>Do Repeat Yourself One of the first software development principles programmers learn is the DRY principle: Don&amp;rsquo;t Repeat Yourself. One can think of it as being quite self-explanatory, without requiring to go beyond &amp;ldquo;remove duplication&amp;rdquo; to claim understanding of it. Is that enough, though? What is duplication, anyway?
Historia Let&amp;rsquo;s start from the beginning. Andrew Hunt and David Thomas first introduced this principle in their 1999 The Pragmatic Programmer: From Journeyman to Master book (an updated 20th Anniversary Edition is also available).</description>
		</item>
		
		<item>
			<title>About</title>
			<link>https://gtramontina.com/about.html</link>
			
			
			<guid>https://gtramontina.com/about.html</guid>
			<description>About me Hello there! Welcome to my little corner of this vast world wide web. My name is Guilherme Johansson Tramontina. I develop software for a living. I&amp;rsquo;m currently working as a software developer at InDebted, in the beautiful Sydney, Australia.
Social Media I&amp;rsquo;m not an avid user of social media. In fact, I try to avoid it as much as I can. There are, though, a few that I end up using more than I&amp;rsquo;d like to admit.</description>
		</item>
		
	</channel>
</rss>
